<?php

/**
 * @file
 * Contains camp_evaluator.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_help().
 */
function camp_evaluator_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the camp_evaluator module.
    case 'help.page.camp_evaluator':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function camp_evaluator_theme() {
  $theme = [];
  $theme['evaluation'] = [
    'render element' => 'elements',
    'file' => 'evaluation.page.inc',
    'template' => 'evaluation',
  ];
  $theme['evaluation_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'evaluation.page.inc',
  ];
  return $theme;
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function camp_evaluator_theme_suggestions_evaluation(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#evaluation'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'evaluation__' . $sanitized_view_mode;
  $suggestions[] = 'evaluation__' . $entity->bundle();
  $suggestions[] = 'evaluation__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'evaluation__' . $entity->id();
  $suggestions[] = 'evaluation__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function camp_evaluator_form_node_type_edit_form_alter(&$form, FormStateInterface $form_state) {

  /** @var \Drupal\node\NodeTypeInterface $type */
  $type = $form_state->getFormObject()->getEntity();

  $form['evaluation'] = [
    '#type' => 'details',
    '#title' => t('Evaluation'),
    '#group' => 'additional_settings'
  ];
  $form['evaluation']['evaluator_enable'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable Evaluation for this Node Type'),
    '#default_value' => $type->getThirdPartySetting('camp_evaluator', 'enable', 0)
  ];

  $bundle_info = \Drupal::service('entity_type.bundle.info')->getBundleInfo('evaluation');
  $keys = array_keys($bundle_info);
  $labels = array_column($bundle_info, 'label');

  $form['evaluation']['evaluator_form'] = [
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => array_combine($keys, $labels),
    '#default_value' => $type->getThirdPartySetting('camp_evaluator', 'form', 'default'),
    '#description' => t('The Evaluation Bundle to use.')
  ];

  $form['#entity_builders'][] = 'camp_evaluator_form_node_type_form_builder';
}

/**
 * Entity builder for the node type form with menu options.
 *
 * @see camp_evaluator_form_node_type_edit_form_alter()
 */
function camp_evaluator_form_node_type_form_builder($entity_type, NodeTypeInterface $type, &$form, FormStateInterface $form_state) {
  $type->setThirdPartySetting('camp_evaluator', 'enable', $form_state->getValue('evaluator_enable'));
  $type->setThirdPartySetting('camp_evaluator', 'form', $form_state->getValue('evaluator_form'));
}

/**
 * Implements hook_entity_access().
 */
/*
function camp_evaluator_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
  if($operation == 'delete') {
    return AccessResult::forbidden();
  }
  return AccessResult::neutral();
}
*/